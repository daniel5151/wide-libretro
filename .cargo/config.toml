[target.'cfg(all())']
rustflags = [
    "-Dfuture_incompatible",
    "-Dnonstandard_style",
    "-Drust_2018_idioms",

    # "-Wmissing_docs",
    "-Wunsafe_op_in_unsafe_fn",

    "-Wclippy::dbg_macro",
    "-Wclippy::debug_assert_with_mut_call",
    "-Wclippy::disallowed_types",
    "-Wclippy::filter_map_next",
    "-Wclippy::fn_params_excessive_bools",
    "-Wclippy::imprecise_flops",
    "-Wclippy::inefficient_to_string",
    "-Wclippy::let_unit_value",
    "-Wclippy::linkedlist",
    "-Wclippy::lossy_float_literal",
    "-Wclippy::macro_use_imports",
    "-Wclippy::map_flatten",
    "-Wclippy::match_on_vec_items",
    "-Wclippy::mismatched_target_os",
    "-Wclippy::needless_borrow",
    "-Wclippy::needless_continue",
    "-Wclippy::option_option",
    "-Wclippy::ref_option_ref",
    "-Wclippy::rest_pat_in_fully_bound_structs",
    "-Wclippy::string_to_string",
    "-Wclippy::suboptimal_flops",
    "-Wclippy::verbose_file_reads",
#   "-Wclippy::unused_self", # might be interesting to explore this...

    "-Aclippy::collapsible_else_if",
    "-Aclippy::collapsible_if",
    "-Aclippy::too_many_arguments",
    "-Aclippy::type_complexity",
    "-Aclippy::bool_assert_comparison",
    # Primarily due to rust-lang/rust#8995
    #
    # If this ever gets fixed, it's be possible to rewrite complex types using
    # inherent associated type aliases.
    #
    # For example, instead of writing this monstrosity:
    #
    #   Result<Option<MultiThreadStopReason<<Self::Arch as Arch>::Usize>>, Self::Error>
    #
    # ...it could be rewritten as:
    #
    #   type StopReason = MultiThreadStopReason<<Self::Arch as Arch>::Usize>>;
    #   Result<Option<StopReason>, Self::Error>
    "-Aclippy::type_complexity",
]
