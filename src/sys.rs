/* automatically generated by rust-bindgen 0.59.2 */

pub const RETRO_API_VERSION: u32 = 1;
pub const RETRO_DEVICE_TYPE_SHIFT: u32 = 8;
pub const RETRO_DEVICE_MASK: u32 = 255;
pub const RETRO_DEVICE_NONE: u32 = 0;
pub const RETRO_DEVICE_JOYPAD: u32 = 1;
pub const RETRO_DEVICE_MOUSE: u32 = 2;
pub const RETRO_DEVICE_KEYBOARD: u32 = 3;
pub const RETRO_DEVICE_LIGHTGUN: u32 = 4;
pub const RETRO_DEVICE_ANALOG: u32 = 5;
pub const RETRO_DEVICE_POINTER: u32 = 6;
pub const RETRO_DEVICE_ID_JOYPAD_B: u32 = 0;
pub const RETRO_DEVICE_ID_JOYPAD_Y: u32 = 1;
pub const RETRO_DEVICE_ID_JOYPAD_SELECT: u32 = 2;
pub const RETRO_DEVICE_ID_JOYPAD_START: u32 = 3;
pub const RETRO_DEVICE_ID_JOYPAD_UP: u32 = 4;
pub const RETRO_DEVICE_ID_JOYPAD_DOWN: u32 = 5;
pub const RETRO_DEVICE_ID_JOYPAD_LEFT: u32 = 6;
pub const RETRO_DEVICE_ID_JOYPAD_RIGHT: u32 = 7;
pub const RETRO_DEVICE_ID_JOYPAD_A: u32 = 8;
pub const RETRO_DEVICE_ID_JOYPAD_X: u32 = 9;
pub const RETRO_DEVICE_ID_JOYPAD_L: u32 = 10;
pub const RETRO_DEVICE_ID_JOYPAD_R: u32 = 11;
pub const RETRO_DEVICE_ID_JOYPAD_L2: u32 = 12;
pub const RETRO_DEVICE_ID_JOYPAD_R2: u32 = 13;
pub const RETRO_DEVICE_ID_JOYPAD_L3: u32 = 14;
pub const RETRO_DEVICE_ID_JOYPAD_R3: u32 = 15;
pub const RETRO_DEVICE_ID_JOYPAD_MASK: u32 = 256;
pub const RETRO_DEVICE_INDEX_ANALOG_LEFT: u32 = 0;
pub const RETRO_DEVICE_INDEX_ANALOG_RIGHT: u32 = 1;
pub const RETRO_DEVICE_INDEX_ANALOG_BUTTON: u32 = 2;
pub const RETRO_DEVICE_ID_ANALOG_X: u32 = 0;
pub const RETRO_DEVICE_ID_ANALOG_Y: u32 = 1;
pub const RETRO_DEVICE_ID_MOUSE_X: u32 = 0;
pub const RETRO_DEVICE_ID_MOUSE_Y: u32 = 1;
pub const RETRO_DEVICE_ID_MOUSE_LEFT: u32 = 2;
pub const RETRO_DEVICE_ID_MOUSE_RIGHT: u32 = 3;
pub const RETRO_DEVICE_ID_MOUSE_WHEELUP: u32 = 4;
pub const RETRO_DEVICE_ID_MOUSE_WHEELDOWN: u32 = 5;
pub const RETRO_DEVICE_ID_MOUSE_MIDDLE: u32 = 6;
pub const RETRO_DEVICE_ID_MOUSE_HORIZ_WHEELUP: u32 = 7;
pub const RETRO_DEVICE_ID_MOUSE_HORIZ_WHEELDOWN: u32 = 8;
pub const RETRO_DEVICE_ID_MOUSE_BUTTON_4: u32 = 9;
pub const RETRO_DEVICE_ID_MOUSE_BUTTON_5: u32 = 10;
pub const RETRO_DEVICE_ID_LIGHTGUN_SCREEN_X: u32 = 13;
pub const RETRO_DEVICE_ID_LIGHTGUN_SCREEN_Y: u32 = 14;
pub const RETRO_DEVICE_ID_LIGHTGUN_IS_OFFSCREEN: u32 = 15;
pub const RETRO_DEVICE_ID_LIGHTGUN_TRIGGER: u32 = 2;
pub const RETRO_DEVICE_ID_LIGHTGUN_RELOAD: u32 = 16;
pub const RETRO_DEVICE_ID_LIGHTGUN_AUX_A: u32 = 3;
pub const RETRO_DEVICE_ID_LIGHTGUN_AUX_B: u32 = 4;
pub const RETRO_DEVICE_ID_LIGHTGUN_START: u32 = 6;
pub const RETRO_DEVICE_ID_LIGHTGUN_SELECT: u32 = 7;
pub const RETRO_DEVICE_ID_LIGHTGUN_AUX_C: u32 = 8;
pub const RETRO_DEVICE_ID_LIGHTGUN_DPAD_UP: u32 = 9;
pub const RETRO_DEVICE_ID_LIGHTGUN_DPAD_DOWN: u32 = 10;
pub const RETRO_DEVICE_ID_LIGHTGUN_DPAD_LEFT: u32 = 11;
pub const RETRO_DEVICE_ID_LIGHTGUN_DPAD_RIGHT: u32 = 12;
pub const RETRO_DEVICE_ID_POINTER_X: u32 = 0;
pub const RETRO_DEVICE_ID_POINTER_Y: u32 = 1;
pub const RETRO_DEVICE_ID_POINTER_PRESSED: u32 = 2;
pub const RETRO_DEVICE_ID_POINTER_COUNT: u32 = 3;
pub const RETRO_REGION_NTSC: u32 = 0;
pub const RETRO_REGION_PAL: u32 = 1;
pub const RETRO_MEMORY_MASK: u32 = 255;
pub const RETRO_MEMORY_SAVE_RAM: u32 = 0;
pub const RETRO_MEMORY_RTC: u32 = 1;
pub const RETRO_MEMORY_SYSTEM_RAM: u32 = 2;
pub const RETRO_MEMORY_VIDEO_RAM: u32 = 3;
impl retro_environment {
    pub const EXPERIMENTAL: retro_environment = retro_environment(65536);
    pub const PRIVATE: retro_environment = retro_environment(131072);
    pub const SET_ROTATION: retro_environment = retro_environment(1);
    pub const GET_OVERSCAN: retro_environment = retro_environment(2);
    pub const GET_CAN_DUPE: retro_environment = retro_environment(3);
    pub const SET_MESSAGE: retro_environment = retro_environment(6);
    pub const SHUTDOWN: retro_environment = retro_environment(7);
    pub const SET_PERFORMANCE_LEVEL: retro_environment = retro_environment(8);
    pub const GET_SYSTEM_DIRECTORY: retro_environment = retro_environment(9);
    pub const SET_PIXEL_FORMAT: retro_environment = retro_environment(10);
    pub const SET_INPUT_DESCRIPTORS: retro_environment = retro_environment(11);
    pub const SET_KEYBOARD_CALLBACK: retro_environment = retro_environment(12);
    pub const SET_DISK_CONTROL_INTERFACE: retro_environment = retro_environment(13);
    pub const SET_HW_RENDER: retro_environment = retro_environment(14);
    pub const GET_VARIABLE: retro_environment = retro_environment(15);
    pub const SET_VARIABLES: retro_environment = retro_environment(16);
    pub const GET_VARIABLE_UPDATE: retro_environment = retro_environment(17);
    pub const SET_SUPPORT_NO_GAME: retro_environment = retro_environment(18);
    pub const GET_LIBRETRO_PATH: retro_environment = retro_environment(19);
    pub const SET_FRAME_TIME_CALLBACK: retro_environment = retro_environment(21);
    pub const SET_AUDIO_CALLBACK: retro_environment = retro_environment(22);
    pub const GET_RUMBLE_INTERFACE: retro_environment = retro_environment(23);
    pub const GET_INPUT_DEVICE_CAPABILITIES: retro_environment = retro_environment(24);
    pub const GET_SENSOR_INTERFACE: retro_environment = retro_environment(65561);
    pub const GET_CAMERA_INTERFACE: retro_environment = retro_environment(65562);
    pub const GET_LOG_INTERFACE: retro_environment = retro_environment(27);
    pub const GET_PERF_INTERFACE: retro_environment = retro_environment(28);
    pub const GET_LOCATION_INTERFACE: retro_environment = retro_environment(29);
    pub const GET_CONTENT_DIRECTORY: retro_environment = retro_environment(30);
    pub const GET_CORE_ASSETS_DIRECTORY: retro_environment = retro_environment(30);
    pub const GET_SAVE_DIRECTORY: retro_environment = retro_environment(31);
    pub const SET_SYSTEM_AV_INFO: retro_environment = retro_environment(32);
    pub const SET_PROC_ADDRESS_CALLBACK: retro_environment = retro_environment(33);
    pub const SET_SUBSYSTEM_INFO: retro_environment = retro_environment(34);
    pub const SET_CONTROLLER_INFO: retro_environment = retro_environment(35);
    pub const SET_MEMORY_MAPS: retro_environment = retro_environment(65572);
    pub const SET_GEOMETRY: retro_environment = retro_environment(37);
    pub const GET_USERNAME: retro_environment = retro_environment(38);
    pub const GET_LANGUAGE: retro_environment = retro_environment(39);
    pub const GET_CURRENT_SOFTWARE_FRAMEBUFFER: retro_environment = retro_environment(65576);
    pub const GET_HW_RENDER_INTERFACE: retro_environment = retro_environment(65577);
    pub const SET_SUPPORT_ACHIEVEMENTS: retro_environment = retro_environment(65578);
    pub const SET_HW_RENDER_CONTEXT_NEGOTIATION_INTERFACE: retro_environment =
        retro_environment(65579);
    pub const SET_SERIALIZATION_QUIRKS: retro_environment = retro_environment(44);
    pub const SET_HW_SHARED_CONTEXT: retro_environment = retro_environment(65580);
    pub const GET_VFS_INTERFACE: retro_environment = retro_environment(65581);
    pub const GET_LED_INTERFACE: retro_environment = retro_environment(65582);
    pub const GET_AUDIO_VIDEO_ENABLE: retro_environment = retro_environment(65583);
    pub const GET_MIDI_INTERFACE: retro_environment = retro_environment(65584);
    pub const GET_FASTFORWARDING: retro_environment = retro_environment(65585);
    pub const GET_TARGET_REFRESH_RATE: retro_environment = retro_environment(65586);
    pub const GET_INPUT_BITMASKS: retro_environment = retro_environment(65587);
    pub const GET_CORE_OPTIONS_VERSION: retro_environment = retro_environment(52);
    pub const SET_CORE_OPTIONS: retro_environment = retro_environment(53);
    pub const SET_CORE_OPTIONS_INTL: retro_environment = retro_environment(54);
    pub const SET_CORE_OPTIONS_DISPLAY: retro_environment = retro_environment(55);
    pub const GET_PREFERRED_HW_RENDER: retro_environment = retro_environment(56);
    pub const GET_DISK_CONTROL_INTERFACE_VERSION: retro_environment = retro_environment(57);
    pub const SET_DISK_CONTROL_EXT_INTERFACE: retro_environment = retro_environment(58);
    pub const GET_MESSAGE_INTERFACE_VERSION: retro_environment = retro_environment(59);
    pub const SET_MESSAGE_EXT: retro_environment = retro_environment(60);
    pub const GET_INPUT_MAX_USERS: retro_environment = retro_environment(61);
    pub const SET_AUDIO_BUFFER_STATUS_CALLBACK: retro_environment = retro_environment(62);
    pub const SET_MINIMUM_AUDIO_LATENCY: retro_environment = retro_environment(63);
    pub const SET_FASTFORWARDING_OVERRIDE: retro_environment = retro_environment(64);
    pub const SET_CONTENT_INFO_OVERRIDE: retro_environment = retro_environment(65);
    pub const GET_GAME_INFO_EXT: retro_environment = retro_environment(66);
    pub const SET_CORE_OPTIONS_V2: retro_environment = retro_environment(67);
    pub const SET_CORE_OPTIONS_V2_INTL: retro_environment = retro_environment(68);
    pub const SET_CORE_OPTIONS_UPDATE_DISPLAY_CALLBACK: retro_environment = retro_environment(69);
    pub const SET_VARIABLE: retro_environment = retro_environment(70);
    pub const GET_THROTTLE_STATE: retro_environment = retro_environment(65607);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct retro_environment(pub ::std::os::raw::c_uint);
pub const RETRO_VFS_FILE_ACCESS_READ: u32 = 1;
pub const RETRO_VFS_FILE_ACCESS_WRITE: u32 = 2;
pub const RETRO_VFS_FILE_ACCESS_READ_WRITE: u32 = 3;
pub const RETRO_VFS_FILE_ACCESS_UPDATE_EXISTING: u32 = 4;
pub const RETRO_VFS_FILE_ACCESS_HINT_NONE: u32 = 0;
pub const RETRO_VFS_FILE_ACCESS_HINT_FREQUENT_ACCESS: u32 = 1;
pub const RETRO_VFS_SEEK_POSITION_START: u32 = 0;
pub const RETRO_VFS_SEEK_POSITION_CURRENT: u32 = 1;
pub const RETRO_VFS_SEEK_POSITION_END: u32 = 2;
pub const RETRO_VFS_STAT_IS_VALID: u32 = 1;
pub const RETRO_VFS_STAT_IS_DIRECTORY: u32 = 2;
pub const RETRO_VFS_STAT_IS_CHARACTER_SPECIAL: u32 = 4;
pub const RETRO_SERIALIZATION_QUIRK_INCOMPLETE: u32 = 1;
pub const RETRO_SERIALIZATION_QUIRK_MUST_INITIALIZE: u32 = 2;
pub const RETRO_SERIALIZATION_QUIRK_CORE_VARIABLE_SIZE: u32 = 4;
pub const RETRO_SERIALIZATION_QUIRK_FRONT_VARIABLE_SIZE: u32 = 8;
pub const RETRO_SERIALIZATION_QUIRK_SINGLE_SESSION: u32 = 16;
pub const RETRO_SERIALIZATION_QUIRK_ENDIAN_DEPENDENT: u32 = 32;
pub const RETRO_SERIALIZATION_QUIRK_PLATFORM_DEPENDENT: u32 = 64;
pub const RETRO_MEMDESC_CONST: u32 = 1;
pub const RETRO_MEMDESC_BIGENDIAN: u32 = 2;
pub const RETRO_MEMDESC_SYSTEM_RAM: u32 = 4;
pub const RETRO_MEMDESC_SAVE_RAM: u32 = 8;
pub const RETRO_MEMDESC_VIDEO_RAM: u32 = 16;
pub const RETRO_MEMDESC_ALIGN_2: u32 = 65536;
pub const RETRO_MEMDESC_ALIGN_4: u32 = 131072;
pub const RETRO_MEMDESC_ALIGN_8: u32 = 196608;
pub const RETRO_MEMDESC_MINSIZE_2: u32 = 16777216;
pub const RETRO_MEMDESC_MINSIZE_4: u32 = 33554432;
pub const RETRO_MEMDESC_MINSIZE_8: u32 = 50331648;
pub const RETRO_SIMD_SSE: u32 = 1;
pub const RETRO_SIMD_SSE2: u32 = 2;
pub const RETRO_SIMD_VMX: u32 = 4;
pub const RETRO_SIMD_VMX128: u32 = 8;
pub const RETRO_SIMD_AVX: u32 = 16;
pub const RETRO_SIMD_NEON: u32 = 32;
pub const RETRO_SIMD_SSE3: u32 = 64;
pub const RETRO_SIMD_SSSE3: u32 = 128;
pub const RETRO_SIMD_MMX: u32 = 256;
pub const RETRO_SIMD_MMXEXT: u32 = 512;
pub const RETRO_SIMD_SSE4: u32 = 1024;
pub const RETRO_SIMD_SSE42: u32 = 2048;
pub const RETRO_SIMD_AVX2: u32 = 4096;
pub const RETRO_SIMD_VFPU: u32 = 8192;
pub const RETRO_SIMD_PS: u32 = 16384;
pub const RETRO_SIMD_AES: u32 = 32768;
pub const RETRO_SIMD_VFPV3: u32 = 65536;
pub const RETRO_SIMD_VFPV4: u32 = 131072;
pub const RETRO_SIMD_POPCNT: u32 = 262144;
pub const RETRO_SIMD_MOVBE: u32 = 524288;
pub const RETRO_SIMD_CMOV: u32 = 1048576;
pub const RETRO_SIMD_ASIMD: u32 = 2097152;
pub const RETRO_SENSOR_ACCELEROMETER_X: u32 = 0;
pub const RETRO_SENSOR_ACCELEROMETER_Y: u32 = 1;
pub const RETRO_SENSOR_ACCELEROMETER_Z: u32 = 2;
pub const RETRO_SENSOR_GYROSCOPE_X: u32 = 3;
pub const RETRO_SENSOR_GYROSCOPE_Y: u32 = 4;
pub const RETRO_SENSOR_GYROSCOPE_Z: u32 = 5;
pub const RETRO_SENSOR_ILLUMINANCE: u32 = 6;
pub const RETRO_NUM_CORE_OPTION_VALUES_MAX: u32 = 128;
pub const RETRO_MEMORY_ACCESS_WRITE: u32 = 1;
pub const RETRO_MEMORY_ACCESS_READ: u32 = 2;
pub const RETRO_MEMORY_TYPE_CACHED: u32 = 1;
pub const RETRO_THROTTLE_NONE: u32 = 0;
pub const RETRO_THROTTLE_FRAME_STEPPING: u32 = 1;
pub const RETRO_THROTTLE_FAST_FORWARD: u32 = 2;
pub const RETRO_THROTTLE_SLOW_MOTION: u32 = 3;
pub const RETRO_THROTTLE_REWINDING: u32 = 4;
pub const RETRO_THROTTLE_VSYNC: u32 = 5;
pub const RETRO_THROTTLE_UNBLOCKED: u32 = 6;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type size_t = usize;
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum retro_language {
    RETRO_LANGUAGE_ENGLISH = 0,
    RETRO_LANGUAGE_JAPANESE = 1,
    RETRO_LANGUAGE_FRENCH = 2,
    RETRO_LANGUAGE_SPANISH = 3,
    RETRO_LANGUAGE_GERMAN = 4,
    RETRO_LANGUAGE_ITALIAN = 5,
    RETRO_LANGUAGE_DUTCH = 6,
    RETRO_LANGUAGE_PORTUGUESE_BRAZIL = 7,
    RETRO_LANGUAGE_PORTUGUESE_PORTUGAL = 8,
    RETRO_LANGUAGE_RUSSIAN = 9,
    RETRO_LANGUAGE_KOREAN = 10,
    RETRO_LANGUAGE_CHINESE_TRADITIONAL = 11,
    RETRO_LANGUAGE_CHINESE_SIMPLIFIED = 12,
    RETRO_LANGUAGE_ESPERANTO = 13,
    RETRO_LANGUAGE_POLISH = 14,
    RETRO_LANGUAGE_VIETNAMESE = 15,
    RETRO_LANGUAGE_ARABIC = 16,
    RETRO_LANGUAGE_GREEK = 17,
    RETRO_LANGUAGE_TURKISH = 18,
    RETRO_LANGUAGE_SLOVAK = 19,
    RETRO_LANGUAGE_PERSIAN = 20,
    RETRO_LANGUAGE_HEBREW = 21,
    RETRO_LANGUAGE_ASTURIAN = 22,
    RETRO_LANGUAGE_FINNISH = 23,
    RETRO_LANGUAGE_INDONESIAN = 24,
    RETRO_LANGUAGE_SWEDISH = 25,
    RETRO_LANGUAGE_UKRAINIAN = 26,
    RETRO_LANGUAGE_CZECH = 27,
    RETRO_LANGUAGE_CATALAN_VALENCIA = 28,
    RETRO_LANGUAGE_CATALAN = 29,
    RETRO_LANGUAGE_LAST = 30,
    RETRO_LANGUAGE_DUMMY = 2147483647,
}
impl retro_key {
    pub const RETROK_UNKNOWN: retro_key = retro_key(0);
    pub const RETROK_FIRST: retro_key = retro_key(0);
    pub const RETROK_BACKSPACE: retro_key = retro_key(8);
    pub const RETROK_TAB: retro_key = retro_key(9);
    pub const RETROK_CLEAR: retro_key = retro_key(12);
    pub const RETROK_RETURN: retro_key = retro_key(13);
    pub const RETROK_PAUSE: retro_key = retro_key(19);
    pub const RETROK_ESCAPE: retro_key = retro_key(27);
    pub const RETROK_SPACE: retro_key = retro_key(32);
    pub const RETROK_EXCLAIM: retro_key = retro_key(33);
    pub const RETROK_QUOTEDBL: retro_key = retro_key(34);
    pub const RETROK_HASH: retro_key = retro_key(35);
    pub const RETROK_DOLLAR: retro_key = retro_key(36);
    pub const RETROK_AMPERSAND: retro_key = retro_key(38);
    pub const RETROK_QUOTE: retro_key = retro_key(39);
    pub const RETROK_LEFTPAREN: retro_key = retro_key(40);
    pub const RETROK_RIGHTPAREN: retro_key = retro_key(41);
    pub const RETROK_ASTERISK: retro_key = retro_key(42);
    pub const RETROK_PLUS: retro_key = retro_key(43);
    pub const RETROK_COMMA: retro_key = retro_key(44);
    pub const RETROK_MINUS: retro_key = retro_key(45);
    pub const RETROK_PERIOD: retro_key = retro_key(46);
    pub const RETROK_SLASH: retro_key = retro_key(47);
    pub const RETROK_0: retro_key = retro_key(48);
    pub const RETROK_1: retro_key = retro_key(49);
    pub const RETROK_2: retro_key = retro_key(50);
    pub const RETROK_3: retro_key = retro_key(51);
    pub const RETROK_4: retro_key = retro_key(52);
    pub const RETROK_5: retro_key = retro_key(53);
    pub const RETROK_6: retro_key = retro_key(54);
    pub const RETROK_7: retro_key = retro_key(55);
    pub const RETROK_8: retro_key = retro_key(56);
    pub const RETROK_9: retro_key = retro_key(57);
    pub const RETROK_COLON: retro_key = retro_key(58);
    pub const RETROK_SEMICOLON: retro_key = retro_key(59);
    pub const RETROK_LESS: retro_key = retro_key(60);
    pub const RETROK_EQUALS: retro_key = retro_key(61);
    pub const RETROK_GREATER: retro_key = retro_key(62);
    pub const RETROK_QUESTION: retro_key = retro_key(63);
    pub const RETROK_AT: retro_key = retro_key(64);
    pub const RETROK_LEFTBRACKET: retro_key = retro_key(91);
    pub const RETROK_BACKSLASH: retro_key = retro_key(92);
    pub const RETROK_RIGHTBRACKET: retro_key = retro_key(93);
    pub const RETROK_CARET: retro_key = retro_key(94);
    pub const RETROK_UNDERSCORE: retro_key = retro_key(95);
    pub const RETROK_BACKQUOTE: retro_key = retro_key(96);
    pub const RETROK_a: retro_key = retro_key(97);
    pub const RETROK_b: retro_key = retro_key(98);
    pub const RETROK_c: retro_key = retro_key(99);
    pub const RETROK_d: retro_key = retro_key(100);
    pub const RETROK_e: retro_key = retro_key(101);
    pub const RETROK_f: retro_key = retro_key(102);
    pub const RETROK_g: retro_key = retro_key(103);
    pub const RETROK_h: retro_key = retro_key(104);
    pub const RETROK_i: retro_key = retro_key(105);
    pub const RETROK_j: retro_key = retro_key(106);
    pub const RETROK_k: retro_key = retro_key(107);
    pub const RETROK_l: retro_key = retro_key(108);
    pub const RETROK_m: retro_key = retro_key(109);
    pub const RETROK_n: retro_key = retro_key(110);
    pub const RETROK_o: retro_key = retro_key(111);
    pub const RETROK_p: retro_key = retro_key(112);
    pub const RETROK_q: retro_key = retro_key(113);
    pub const RETROK_r: retro_key = retro_key(114);
    pub const RETROK_s: retro_key = retro_key(115);
    pub const RETROK_t: retro_key = retro_key(116);
    pub const RETROK_u: retro_key = retro_key(117);
    pub const RETROK_v: retro_key = retro_key(118);
    pub const RETROK_w: retro_key = retro_key(119);
    pub const RETROK_x: retro_key = retro_key(120);
    pub const RETROK_y: retro_key = retro_key(121);
    pub const RETROK_z: retro_key = retro_key(122);
    pub const RETROK_LEFTBRACE: retro_key = retro_key(123);
    pub const RETROK_BAR: retro_key = retro_key(124);
    pub const RETROK_RIGHTBRACE: retro_key = retro_key(125);
    pub const RETROK_TILDE: retro_key = retro_key(126);
    pub const RETROK_DELETE: retro_key = retro_key(127);
    pub const RETROK_KP0: retro_key = retro_key(256);
    pub const RETROK_KP1: retro_key = retro_key(257);
    pub const RETROK_KP2: retro_key = retro_key(258);
    pub const RETROK_KP3: retro_key = retro_key(259);
    pub const RETROK_KP4: retro_key = retro_key(260);
    pub const RETROK_KP5: retro_key = retro_key(261);
    pub const RETROK_KP6: retro_key = retro_key(262);
    pub const RETROK_KP7: retro_key = retro_key(263);
    pub const RETROK_KP8: retro_key = retro_key(264);
    pub const RETROK_KP9: retro_key = retro_key(265);
    pub const RETROK_KP_PERIOD: retro_key = retro_key(266);
    pub const RETROK_KP_DIVIDE: retro_key = retro_key(267);
    pub const RETROK_KP_MULTIPLY: retro_key = retro_key(268);
    pub const RETROK_KP_MINUS: retro_key = retro_key(269);
    pub const RETROK_KP_PLUS: retro_key = retro_key(270);
    pub const RETROK_KP_ENTER: retro_key = retro_key(271);
    pub const RETROK_KP_EQUALS: retro_key = retro_key(272);
    pub const RETROK_UP: retro_key = retro_key(273);
    pub const RETROK_DOWN: retro_key = retro_key(274);
    pub const RETROK_RIGHT: retro_key = retro_key(275);
    pub const RETROK_LEFT: retro_key = retro_key(276);
    pub const RETROK_INSERT: retro_key = retro_key(277);
    pub const RETROK_HOME: retro_key = retro_key(278);
    pub const RETROK_END: retro_key = retro_key(279);
    pub const RETROK_PAGEUP: retro_key = retro_key(280);
    pub const RETROK_PAGEDOWN: retro_key = retro_key(281);
    pub const RETROK_F1: retro_key = retro_key(282);
    pub const RETROK_F2: retro_key = retro_key(283);
    pub const RETROK_F3: retro_key = retro_key(284);
    pub const RETROK_F4: retro_key = retro_key(285);
    pub const RETROK_F5: retro_key = retro_key(286);
    pub const RETROK_F6: retro_key = retro_key(287);
    pub const RETROK_F7: retro_key = retro_key(288);
    pub const RETROK_F8: retro_key = retro_key(289);
    pub const RETROK_F9: retro_key = retro_key(290);
    pub const RETROK_F10: retro_key = retro_key(291);
    pub const RETROK_F11: retro_key = retro_key(292);
    pub const RETROK_F12: retro_key = retro_key(293);
    pub const RETROK_F13: retro_key = retro_key(294);
    pub const RETROK_F14: retro_key = retro_key(295);
    pub const RETROK_F15: retro_key = retro_key(296);
    pub const RETROK_NUMLOCK: retro_key = retro_key(300);
    pub const RETROK_CAPSLOCK: retro_key = retro_key(301);
    pub const RETROK_SCROLLOCK: retro_key = retro_key(302);
    pub const RETROK_RSHIFT: retro_key = retro_key(303);
    pub const RETROK_LSHIFT: retro_key = retro_key(304);
    pub const RETROK_RCTRL: retro_key = retro_key(305);
    pub const RETROK_LCTRL: retro_key = retro_key(306);
    pub const RETROK_RALT: retro_key = retro_key(307);
    pub const RETROK_LALT: retro_key = retro_key(308);
    pub const RETROK_RMETA: retro_key = retro_key(309);
    pub const RETROK_LMETA: retro_key = retro_key(310);
    pub const RETROK_LSUPER: retro_key = retro_key(311);
    pub const RETROK_RSUPER: retro_key = retro_key(312);
    pub const RETROK_MODE: retro_key = retro_key(313);
    pub const RETROK_COMPOSE: retro_key = retro_key(314);
    pub const RETROK_HELP: retro_key = retro_key(315);
    pub const RETROK_PRINT: retro_key = retro_key(316);
    pub const RETROK_SYSREQ: retro_key = retro_key(317);
    pub const RETROK_BREAK: retro_key = retro_key(318);
    pub const RETROK_MENU: retro_key = retro_key(319);
    pub const RETROK_POWER: retro_key = retro_key(320);
    pub const RETROK_EURO: retro_key = retro_key(321);
    pub const RETROK_UNDO: retro_key = retro_key(322);
    pub const RETROK_OEM_102: retro_key = retro_key(323);
    pub const RETROK_LAST: retro_key = retro_key(324);
    pub const RETROK_DUMMY: retro_key = retro_key(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct retro_key(pub ::std::os::raw::c_uint);
impl retro_mod {
    pub const RETROKMOD_NONE: retro_mod = retro_mod(0);
    pub const RETROKMOD_SHIFT: retro_mod = retro_mod(1);
    pub const RETROKMOD_CTRL: retro_mod = retro_mod(2);
    pub const RETROKMOD_ALT: retro_mod = retro_mod(4);
    pub const RETROKMOD_META: retro_mod = retro_mod(8);
    pub const RETROKMOD_NUMLOCK: retro_mod = retro_mod(16);
    pub const RETROKMOD_CAPSLOCK: retro_mod = retro_mod(32);
    pub const RETROKMOD_SCROLLOCK: retro_mod = retro_mod(64);
    pub const RETROKMOD_DUMMY: retro_mod = retro_mod(2147483647);
}
impl ::std::ops::BitOr<retro_mod> for retro_mod {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        retro_mod(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for retro_mod {
    #[inline]
    fn bitor_assign(&mut self, rhs: retro_mod) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<retro_mod> for retro_mod {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        retro_mod(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for retro_mod {
    #[inline]
    fn bitand_assign(&mut self, rhs: retro_mod) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct retro_mod(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_vfs_file_handle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_vfs_dir_handle {
    _unused: [u8; 0],
}
pub type retro_vfs_get_path_t = ::std::option::Option<
    unsafe extern "C" fn(stream: *mut retro_vfs_file_handle) -> *const ::std::os::raw::c_char,
>;
pub type retro_vfs_open_t = ::std::option::Option<
    unsafe extern "C" fn(
        path: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_uint,
        hints: ::std::os::raw::c_uint,
    ) -> *mut retro_vfs_file_handle,
>;
pub type retro_vfs_close_t = ::std::option::Option<
    unsafe extern "C" fn(stream: *mut retro_vfs_file_handle) -> ::std::os::raw::c_int,
>;
pub type retro_vfs_size_t =
    ::std::option::Option<unsafe extern "C" fn(stream: *mut retro_vfs_file_handle) -> i64>;
pub type retro_vfs_truncate_t = ::std::option::Option<
    unsafe extern "C" fn(stream: *mut retro_vfs_file_handle, length: i64) -> i64,
>;
pub type retro_vfs_tell_t =
    ::std::option::Option<unsafe extern "C" fn(stream: *mut retro_vfs_file_handle) -> i64>;
pub type retro_vfs_seek_t = ::std::option::Option<
    unsafe extern "C" fn(
        stream: *mut retro_vfs_file_handle,
        offset: i64,
        seek_position: ::std::os::raw::c_int,
    ) -> i64,
>;
pub type retro_vfs_read_t = ::std::option::Option<
    unsafe extern "C" fn(
        stream: *mut retro_vfs_file_handle,
        s: *mut ::std::os::raw::c_void,
        len: u64,
    ) -> i64,
>;
pub type retro_vfs_write_t = ::std::option::Option<
    unsafe extern "C" fn(
        stream: *mut retro_vfs_file_handle,
        s: *const ::std::os::raw::c_void,
        len: u64,
    ) -> i64,
>;
pub type retro_vfs_flush_t = ::std::option::Option<
    unsafe extern "C" fn(stream: *mut retro_vfs_file_handle) -> ::std::os::raw::c_int,
>;
pub type retro_vfs_remove_t = ::std::option::Option<
    unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
>;
pub type retro_vfs_rename_t = ::std::option::Option<
    unsafe extern "C" fn(
        old_path: *const ::std::os::raw::c_char,
        new_path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type retro_vfs_stat_t = ::std::option::Option<
    unsafe extern "C" fn(
        path: *const ::std::os::raw::c_char,
        size: *mut i32,
    ) -> ::std::os::raw::c_int,
>;
pub type retro_vfs_mkdir_t = ::std::option::Option<
    unsafe extern "C" fn(dir: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
>;
pub type retro_vfs_opendir_t = ::std::option::Option<
    unsafe extern "C" fn(
        dir: *const ::std::os::raw::c_char,
        include_hidden: bool,
    ) -> *mut retro_vfs_dir_handle,
>;
pub type retro_vfs_readdir_t =
    ::std::option::Option<unsafe extern "C" fn(dirstream: *mut retro_vfs_dir_handle) -> bool>;
pub type retro_vfs_dirent_get_name_t = ::std::option::Option<
    unsafe extern "C" fn(dirstream: *mut retro_vfs_dir_handle) -> *const ::std::os::raw::c_char,
>;
pub type retro_vfs_dirent_is_dir_t =
    ::std::option::Option<unsafe extern "C" fn(dirstream: *mut retro_vfs_dir_handle) -> bool>;
pub type retro_vfs_closedir_t = ::std::option::Option<
    unsafe extern "C" fn(dirstream: *mut retro_vfs_dir_handle) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_vfs_interface {
    pub get_path: retro_vfs_get_path_t,
    pub open: retro_vfs_open_t,
    pub close: retro_vfs_close_t,
    pub size: retro_vfs_size_t,
    pub tell: retro_vfs_tell_t,
    pub seek: retro_vfs_seek_t,
    pub read: retro_vfs_read_t,
    pub write: retro_vfs_write_t,
    pub flush: retro_vfs_flush_t,
    pub remove: retro_vfs_remove_t,
    pub rename: retro_vfs_rename_t,
    pub truncate: retro_vfs_truncate_t,
    pub stat: retro_vfs_stat_t,
    pub mkdir: retro_vfs_mkdir_t,
    pub opendir: retro_vfs_opendir_t,
    pub readdir: retro_vfs_readdir_t,
    pub dirent_get_name: retro_vfs_dirent_get_name_t,
    pub dirent_is_dir: retro_vfs_dirent_is_dir_t,
    pub closedir: retro_vfs_closedir_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_vfs_interface_info {
    pub required_interface_version: u32,
    pub iface: *mut retro_vfs_interface,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum retro_hw_render_interface_type {
    RETRO_HW_RENDER_INTERFACE_VULKAN = 0,
    RETRO_HW_RENDER_INTERFACE_D3D9 = 1,
    RETRO_HW_RENDER_INTERFACE_D3D10 = 2,
    RETRO_HW_RENDER_INTERFACE_D3D11 = 3,
    RETRO_HW_RENDER_INTERFACE_D3D12 = 4,
    RETRO_HW_RENDER_INTERFACE_GSKIT_PS2 = 5,
    RETRO_HW_RENDER_INTERFACE_DUMMY = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_hw_render_interface {
    pub interface_type: retro_hw_render_interface_type,
    pub interface_version: ::std::os::raw::c_uint,
}
pub type retro_set_led_state_t = ::std::option::Option<
    unsafe extern "C" fn(led: ::std::os::raw::c_int, state: ::std::os::raw::c_int),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_led_interface {
    pub set_led_state: retro_set_led_state_t,
}
pub type retro_midi_input_enabled_t = ::std::option::Option<unsafe extern "C" fn() -> bool>;
pub type retro_midi_output_enabled_t = ::std::option::Option<unsafe extern "C" fn() -> bool>;
pub type retro_midi_read_t = ::std::option::Option<unsafe extern "C" fn(byte: *mut u8) -> bool>;
pub type retro_midi_write_t =
    ::std::option::Option<unsafe extern "C" fn(byte: u8, delta_time: u32) -> bool>;
pub type retro_midi_flush_t = ::std::option::Option<unsafe extern "C" fn() -> bool>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_midi_interface {
    pub input_enabled: retro_midi_input_enabled_t,
    pub output_enabled: retro_midi_output_enabled_t,
    pub read: retro_midi_read_t,
    pub write: retro_midi_write_t,
    pub flush: retro_midi_flush_t,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum retro_hw_render_context_negotiation_interface_type {
    RETRO_HW_RENDER_CONTEXT_NEGOTIATION_INTERFACE_VULKAN = 0,
    RETRO_HW_RENDER_CONTEXT_NEGOTIATION_INTERFACE_DUMMY = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_hw_render_context_negotiation_interface {
    pub interface_type: retro_hw_render_context_negotiation_interface_type,
    pub interface_version: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_memory_descriptor {
    pub flags: u64,
    pub ptr: *mut ::std::os::raw::c_void,
    pub offset: size_t,
    pub start: size_t,
    pub select: size_t,
    pub disconnect: size_t,
    pub len: size_t,
    pub addrspace: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_memory_map {
    pub descriptors: *const retro_memory_descriptor,
    pub num_descriptors: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_controller_description {
    pub desc: *const ::std::os::raw::c_char,
    pub id: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_controller_info {
    pub types: *const retro_controller_description,
    pub num_types: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_subsystem_memory_info {
    pub extension: *const ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_subsystem_rom_info {
    pub desc: *const ::std::os::raw::c_char,
    pub valid_extensions: *const ::std::os::raw::c_char,
    pub need_fullpath: bool,
    pub block_extract: bool,
    pub required: bool,
    pub memory: *const retro_subsystem_memory_info,
    pub num_memory: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_subsystem_info {
    pub desc: *const ::std::os::raw::c_char,
    pub ident: *const ::std::os::raw::c_char,
    pub roms: *const retro_subsystem_rom_info,
    pub num_roms: ::std::os::raw::c_uint,
    pub id: ::std::os::raw::c_uint,
}
pub type retro_proc_address_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type retro_get_proc_address_t = ::std::option::Option<
    unsafe extern "C" fn(sym: *const ::std::os::raw::c_char) -> retro_proc_address_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_get_proc_address_interface {
    pub get_proc_address: retro_get_proc_address_t,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum retro_log_level {
    RETRO_LOG_DEBUG = 0,
    RETRO_LOG_INFO = 1,
    RETRO_LOG_WARN = 2,
    RETRO_LOG_ERROR = 3,
    RETRO_LOG_DUMMY = 2147483647,
}
pub type retro_log_printf_t = ::std::option::Option<
    unsafe extern "C" fn(level: retro_log_level, fmt: *const ::std::os::raw::c_char, ...),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_log_callback {
    pub log: retro_log_printf_t,
}
pub type retro_perf_tick_t = u64;
pub type retro_time_t = i64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_perf_counter {
    pub ident: *const ::std::os::raw::c_char,
    pub start: retro_perf_tick_t,
    pub total: retro_perf_tick_t,
    pub call_cnt: retro_perf_tick_t,
    pub registered: bool,
}
pub type retro_perf_get_time_usec_t = ::std::option::Option<unsafe extern "C" fn() -> retro_time_t>;
pub type retro_perf_get_counter_t =
    ::std::option::Option<unsafe extern "C" fn() -> retro_perf_tick_t>;
pub type retro_get_cpu_features_t = ::std::option::Option<unsafe extern "C" fn() -> u64>;
pub type retro_perf_log_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type retro_perf_register_t =
    ::std::option::Option<unsafe extern "C" fn(counter: *mut retro_perf_counter)>;
pub type retro_perf_start_t =
    ::std::option::Option<unsafe extern "C" fn(counter: *mut retro_perf_counter)>;
pub type retro_perf_stop_t =
    ::std::option::Option<unsafe extern "C" fn(counter: *mut retro_perf_counter)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_perf_callback {
    pub get_time_usec: retro_perf_get_time_usec_t,
    pub get_cpu_features: retro_get_cpu_features_t,
    pub get_perf_counter: retro_perf_get_counter_t,
    pub perf_register: retro_perf_register_t,
    pub perf_start: retro_perf_start_t,
    pub perf_stop: retro_perf_stop_t,
    pub perf_log: retro_perf_log_t,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum retro_sensor_action {
    RETRO_SENSOR_ACCELEROMETER_ENABLE = 0,
    RETRO_SENSOR_ACCELEROMETER_DISABLE = 1,
    RETRO_SENSOR_GYROSCOPE_ENABLE = 2,
    RETRO_SENSOR_GYROSCOPE_DISABLE = 3,
    RETRO_SENSOR_ILLUMINANCE_ENABLE = 4,
    RETRO_SENSOR_ILLUMINANCE_DISABLE = 5,
    RETRO_SENSOR_DUMMY = 2147483647,
}
pub type retro_set_sensor_state_t = ::std::option::Option<
    unsafe extern "C" fn(
        port: ::std::os::raw::c_uint,
        action: retro_sensor_action,
        rate: ::std::os::raw::c_uint,
    ) -> bool,
>;
pub type retro_sensor_get_input_t = ::std::option::Option<
    unsafe extern "C" fn(port: ::std::os::raw::c_uint, id: ::std::os::raw::c_uint) -> f32,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_sensor_interface {
    pub set_sensor_state: retro_set_sensor_state_t,
    pub get_sensor_input: retro_sensor_get_input_t,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum retro_camera_buffer {
    RETRO_CAMERA_BUFFER_OPENGL_TEXTURE = 0,
    RETRO_CAMERA_BUFFER_RAW_FRAMEBUFFER = 1,
    RETRO_CAMERA_BUFFER_DUMMY = 2147483647,
}
pub type retro_camera_start_t = ::std::option::Option<unsafe extern "C" fn() -> bool>;
pub type retro_camera_stop_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type retro_camera_lifetime_status_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type retro_camera_frame_raw_framebuffer_t = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: *const u32,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        pitch: size_t,
    ),
>;
pub type retro_camera_frame_opengl_texture_t = ::std::option::Option<
    unsafe extern "C" fn(
        texture_id: ::std::os::raw::c_uint,
        texture_target: ::std::os::raw::c_uint,
        affine: *const f32,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_camera_callback {
    pub caps: u64,
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
    pub start: retro_camera_start_t,
    pub stop: retro_camera_stop_t,
    pub frame_raw_framebuffer: retro_camera_frame_raw_framebuffer_t,
    pub frame_opengl_texture: retro_camera_frame_opengl_texture_t,
    pub initialized: retro_camera_lifetime_status_t,
    pub deinitialized: retro_camera_lifetime_status_t,
}
pub type retro_location_set_interval_t = ::std::option::Option<
    unsafe extern "C" fn(
        interval_ms: ::std::os::raw::c_uint,
        interval_distance: ::std::os::raw::c_uint,
    ),
>;
pub type retro_location_start_t = ::std::option::Option<unsafe extern "C" fn() -> bool>;
pub type retro_location_stop_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type retro_location_get_position_t = ::std::option::Option<
    unsafe extern "C" fn(
        lat: *mut f64,
        lon: *mut f64,
        horiz_accuracy: *mut f64,
        vert_accuracy: *mut f64,
    ) -> bool,
>;
pub type retro_location_lifetime_status_t = ::std::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_location_callback {
    pub start: retro_location_start_t,
    pub stop: retro_location_stop_t,
    pub get_position: retro_location_get_position_t,
    pub set_interval: retro_location_set_interval_t,
    pub initialized: retro_location_lifetime_status_t,
    pub deinitialized: retro_location_lifetime_status_t,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum retro_rumble_effect {
    RETRO_RUMBLE_STRONG = 0,
    RETRO_RUMBLE_WEAK = 1,
    RETRO_RUMBLE_DUMMY = 2147483647,
}
pub type retro_set_rumble_state_t = ::std::option::Option<
    unsafe extern "C" fn(
        port: ::std::os::raw::c_uint,
        effect: retro_rumble_effect,
        strength: u16,
    ) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_rumble_interface {
    pub set_rumble_state: retro_set_rumble_state_t,
}
pub type retro_audio_callback_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type retro_audio_set_state_callback_t =
    ::std::option::Option<unsafe extern "C" fn(enabled: bool)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_audio_callback {
    pub callback: retro_audio_callback_t,
    pub set_state: retro_audio_set_state_callback_t,
}
pub type retro_usec_t = i64;
pub type retro_frame_time_callback_t =
    ::std::option::Option<unsafe extern "C" fn(usec: retro_usec_t)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_frame_time_callback {
    pub callback: retro_frame_time_callback_t,
    pub reference: retro_usec_t,
}
pub type retro_audio_buffer_status_callback_t = ::std::option::Option<
    unsafe extern "C" fn(active: bool, occupancy: ::std::os::raw::c_uint, underrun_likely: bool),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_audio_buffer_status_callback {
    pub callback: retro_audio_buffer_status_callback_t,
}
pub type retro_hw_context_reset_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type retro_hw_get_current_framebuffer_t =
    ::std::option::Option<unsafe extern "C" fn() -> usize>;
pub type retro_hw_get_proc_address_t = ::std::option::Option<
    unsafe extern "C" fn(sym: *const ::std::os::raw::c_char) -> retro_proc_address_t,
>;
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum retro_hw_context_type {
    RETRO_HW_CONTEXT_NONE = 0,
    RETRO_HW_CONTEXT_OPENGL = 1,
    RETRO_HW_CONTEXT_OPENGLES2 = 2,
    RETRO_HW_CONTEXT_OPENGL_CORE = 3,
    RETRO_HW_CONTEXT_OPENGLES3 = 4,
    RETRO_HW_CONTEXT_OPENGLES_VERSION = 5,
    RETRO_HW_CONTEXT_VULKAN = 6,
    RETRO_HW_CONTEXT_DIRECT3D = 7,
    RETRO_HW_CONTEXT_DUMMY = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_hw_render_callback {
    pub context_type: retro_hw_context_type,
    pub context_reset: retro_hw_context_reset_t,
    pub get_current_framebuffer: retro_hw_get_current_framebuffer_t,
    pub get_proc_address: retro_hw_get_proc_address_t,
    pub depth: bool,
    pub stencil: bool,
    pub bottom_left_origin: bool,
    pub version_major: ::std::os::raw::c_uint,
    pub version_minor: ::std::os::raw::c_uint,
    pub cache_context: bool,
    pub context_destroy: retro_hw_context_reset_t,
    pub debug_context: bool,
}
pub type retro_keyboard_event_t = ::std::option::Option<
    unsafe extern "C" fn(
        down: bool,
        keycode: ::std::os::raw::c_uint,
        character: u32,
        key_modifiers: u16,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_keyboard_callback {
    pub callback: retro_keyboard_event_t,
}
pub type retro_set_eject_state_t =
    ::std::option::Option<unsafe extern "C" fn(ejected: bool) -> bool>;
pub type retro_get_eject_state_t = ::std::option::Option<unsafe extern "C" fn() -> bool>;
pub type retro_get_image_index_t =
    ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_uint>;
pub type retro_set_image_index_t =
    ::std::option::Option<unsafe extern "C" fn(index: ::std::os::raw::c_uint) -> bool>;
pub type retro_get_num_images_t =
    ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_uint>;
pub type retro_replace_image_index_t = ::std::option::Option<
    unsafe extern "C" fn(index: ::std::os::raw::c_uint, info: *const retro_game_info) -> bool,
>;
pub type retro_add_image_index_t = ::std::option::Option<unsafe extern "C" fn() -> bool>;
pub type retro_set_initial_image_t = ::std::option::Option<
    unsafe extern "C" fn(
        index: ::std::os::raw::c_uint,
        path: *const ::std::os::raw::c_char,
    ) -> bool,
>;
pub type retro_get_image_path_t = ::std::option::Option<
    unsafe extern "C" fn(
        index: ::std::os::raw::c_uint,
        path: *mut ::std::os::raw::c_char,
        len: size_t,
    ) -> bool,
>;
pub type retro_get_image_label_t = ::std::option::Option<
    unsafe extern "C" fn(
        index: ::std::os::raw::c_uint,
        label: *mut ::std::os::raw::c_char,
        len: size_t,
    ) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_disk_control_callback {
    pub set_eject_state: retro_set_eject_state_t,
    pub get_eject_state: retro_get_eject_state_t,
    pub get_image_index: retro_get_image_index_t,
    pub set_image_index: retro_set_image_index_t,
    pub get_num_images: retro_get_num_images_t,
    pub replace_image_index: retro_replace_image_index_t,
    pub add_image_index: retro_add_image_index_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_disk_control_ext_callback {
    pub set_eject_state: retro_set_eject_state_t,
    pub get_eject_state: retro_get_eject_state_t,
    pub get_image_index: retro_get_image_index_t,
    pub set_image_index: retro_set_image_index_t,
    pub get_num_images: retro_get_num_images_t,
    pub replace_image_index: retro_replace_image_index_t,
    pub add_image_index: retro_add_image_index_t,
    pub set_initial_image: retro_set_initial_image_t,
    pub get_image_path: retro_get_image_path_t,
    pub get_image_label: retro_get_image_label_t,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum retro_pixel_format {
    _0RGB1555 = 0,
    _XRGB8888 = 1,
    _RGB565 = 2,
    _UNKNOWN = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_message {
    pub msg: *const ::std::os::raw::c_char,
    pub frames: ::std::os::raw::c_uint,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum retro_message_target {
    RETRO_MESSAGE_TARGET_ALL = 0,
    RETRO_MESSAGE_TARGET_OSD = 1,
    RETRO_MESSAGE_TARGET_LOG = 2,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum retro_message_type {
    RETRO_MESSAGE_TYPE_NOTIFICATION = 0,
    RETRO_MESSAGE_TYPE_NOTIFICATION_ALT = 1,
    RETRO_MESSAGE_TYPE_STATUS = 2,
    RETRO_MESSAGE_TYPE_PROGRESS = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_message_ext {
    pub msg: *const ::std::os::raw::c_char,
    pub duration: ::std::os::raw::c_uint,
    pub priority: ::std::os::raw::c_uint,
    pub level: retro_log_level,
    pub target: retro_message_target,
    pub type_: retro_message_type,
    pub progress: i8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_input_descriptor {
    pub port: ::std::os::raw::c_uint,
    pub device: ::std::os::raw::c_uint,
    pub index: ::std::os::raw::c_uint,
    pub id: ::std::os::raw::c_uint,
    pub description: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_system_info {
    pub library_name: *const ::std::os::raw::c_char,
    pub library_version: *const ::std::os::raw::c_char,
    pub valid_extensions: *const ::std::os::raw::c_char,
    pub need_fullpath: bool,
    pub block_extract: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_system_content_info_override {
    pub extensions: *const ::std::os::raw::c_char,
    pub need_fullpath: bool,
    pub persistent_data: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_game_info_ext {
    pub full_path: *const ::std::os::raw::c_char,
    pub archive_path: *const ::std::os::raw::c_char,
    pub archive_file: *const ::std::os::raw::c_char,
    pub dir: *const ::std::os::raw::c_char,
    pub name: *const ::std::os::raw::c_char,
    pub ext: *const ::std::os::raw::c_char,
    pub meta: *const ::std::os::raw::c_char,
    pub data: *const ::std::os::raw::c_void,
    pub size: size_t,
    pub file_in_archive: bool,
    pub persistent_data: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_game_geometry {
    pub base_width: ::std::os::raw::c_uint,
    pub base_height: ::std::os::raw::c_uint,
    pub max_width: ::std::os::raw::c_uint,
    pub max_height: ::std::os::raw::c_uint,
    pub aspect_ratio: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_system_timing {
    pub fps: f64,
    pub sample_rate: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_system_av_info {
    pub geometry: retro_game_geometry,
    pub timing: retro_system_timing,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_variable {
    pub key: *const ::std::os::raw::c_char,
    pub value: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_core_option_display {
    pub key: *const ::std::os::raw::c_char,
    pub visible: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_core_option_value {
    pub value: *const ::std::os::raw::c_char,
    pub label: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_core_option_definition {
    pub key: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
    pub info: *const ::std::os::raw::c_char,
    pub values: [retro_core_option_value; 128usize],
    pub default_value: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_core_options_intl {
    pub us: *mut retro_core_option_definition,
    pub local: *mut retro_core_option_definition,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_core_option_v2_category {
    pub key: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
    pub info: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_core_option_v2_definition {
    pub key: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
    pub desc_categorized: *const ::std::os::raw::c_char,
    pub info: *const ::std::os::raw::c_char,
    pub info_categorized: *const ::std::os::raw::c_char,
    pub category_key: *const ::std::os::raw::c_char,
    pub values: [retro_core_option_value; 128usize],
    pub default_value: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_core_options_v2 {
    pub categories: *mut retro_core_option_v2_category,
    pub definitions: *mut retro_core_option_v2_definition,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_core_options_v2_intl {
    pub us: *mut retro_core_options_v2,
    pub local: *mut retro_core_options_v2,
}
pub type retro_core_options_update_display_callback_t =
    ::std::option::Option<unsafe extern "C" fn() -> bool>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_core_options_update_display_callback {
    pub callback: retro_core_options_update_display_callback_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_game_info {
    pub path: *const ::std::os::raw::c_char,
    pub data: *const ::std::os::raw::c_void,
    pub size: size_t,
    pub meta: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_framebuffer {
    pub data: *mut ::std::os::raw::c_void,
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
    pub pitch: size_t,
    pub format: retro_pixel_format,
    pub access_flags: ::std::os::raw::c_uint,
    pub memory_flags: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_fastforwarding_override {
    pub ratio: f32,
    pub fastforward: bool,
    pub notification: bool,
    pub inhibit_toggle: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_throttle_state {
    pub mode: ::std::os::raw::c_uint,
    pub rate: f32,
}
pub type retro_environment_t = ::std::option::Option<
    unsafe extern "C" fn(cmd: ::std::os::raw::c_uint, data: *mut ::std::os::raw::c_void) -> bool,
>;
pub type retro_video_refresh_t = ::std::option::Option<
    unsafe extern "C" fn(
        data: *const ::std::os::raw::c_void,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        pitch: size_t,
    ),
>;
pub type retro_audio_sample_t = ::std::option::Option<unsafe extern "C" fn(left: i16, right: i16)>;
pub type retro_audio_sample_batch_t =
    ::std::option::Option<unsafe extern "C" fn(data: *const i16, frames: size_t) -> size_t>;
pub type retro_input_poll_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type retro_input_state_t = ::std::option::Option<
    unsafe extern "C" fn(
        port: ::std::os::raw::c_uint,
        device: ::std::os::raw::c_uint,
        index: ::std::os::raw::c_uint,
        id: ::std::os::raw::c_uint,
    ) -> i16,
>;
extern "C" {
    pub fn retro_set_environment(arg1: retro_environment_t);
    pub fn retro_set_video_refresh(arg1: retro_video_refresh_t);
    pub fn retro_set_audio_sample(arg1: retro_audio_sample_t);
    pub fn retro_set_audio_sample_batch(arg1: retro_audio_sample_batch_t);
    pub fn retro_set_input_poll(arg1: retro_input_poll_t);
    pub fn retro_set_input_state(arg1: retro_input_state_t);
    pub fn retro_init();
    pub fn retro_deinit();
    pub fn retro_api_version() -> ::std::os::raw::c_uint;
    pub fn retro_get_system_info(info: *mut retro_system_info);
    pub fn retro_get_system_av_info(info: *mut retro_system_av_info);
    pub fn retro_set_controller_port_device(
        port: ::std::os::raw::c_uint,
        device: ::std::os::raw::c_uint,
    );
    pub fn retro_reset();
    pub fn retro_run();
    pub fn retro_serialize_size() -> size_t;
    pub fn retro_serialize(data: *mut ::std::os::raw::c_void, size: size_t) -> bool;
    pub fn retro_unserialize(data: *const ::std::os::raw::c_void, size: size_t) -> bool;
    pub fn retro_cheat_reset();
    pub fn retro_cheat_set(
        index: ::std::os::raw::c_uint,
        enabled: bool,
        code: *const ::std::os::raw::c_char,
    );
    pub fn retro_load_game(game: *const retro_game_info) -> bool;
    pub fn retro_load_game_special(
        game_type: ::std::os::raw::c_uint,
        info: *const retro_game_info,
        num_info: size_t,
    ) -> bool;
    pub fn retro_unload_game();
    pub fn retro_get_region() -> ::std::os::raw::c_uint;
    pub fn retro_get_memory_data(id: ::std::os::raw::c_uint) -> *mut ::std::os::raw::c_void;
    pub fn retro_get_memory_size(id: ::std::os::raw::c_uint) -> size_t;
}
